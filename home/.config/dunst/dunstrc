[global]

    ### Display ###

    # Which monitor should the notifications be shown on
    monitor = 0

    # Display notifications on focused monitor. Possible modes:
    # mouse: follow mouse pointer
    # keyboard: follow window with keyboard focus
    # none: don't follow anything
    #
    # keyboard needs a WM that exports _NET_ACTIVE_WINDOW propery!
    # if this option isn't none, monitor option will be ignored.
    follow = mouse

    # Notification window size:
    # [{width}]x{height}[+/-{x}+/-{y}]
    # height is measured in number of notifications, everything
    # else is in pixels
    #
    # if width is omitted (geometry = "x2", message window expands
    # over the whole screen (dmenu-like).
    # if width is 0, message window expands to fit the message.
    # positive x is measured from the left, negative from right
    # Y is measured from the top and bottom respectively.
    # width can be negative, making it the screen width - width
    geometry = "300x0-30+30"

    # Show how many messages are currently hidden (because of geometry)
    indicate_hidden = yes

    # Shrink window if it's smaller than the width. ignored when width = 0
    shrink = no

    # Transparency of the window. Range: [0-100]
    # only works with composing WM (e.g. xcompdir, compiz, ...)
    transparency = 20

    # The height of the entire notification. If the height is smaller
    # than the font height and padding combined, it will be raised to
    # the font height and padding.
    notification_height = 0

    # Draw a line of "separator_height" pixel height between notifications
    separator_height = 2

    # Padding between text and separator
    padding = 8

    # Horizontal padding
    horizontal_padding = 8

    # Width in pixels of frame around the notification window
    # disabled if set to 0
    frame_width = 3

    # Defines color of the frame around the notification window
    frame_color = "#aaaaaa"

    # Define a color for the separator.
    # possible values are:
    #  * auto: dunst tries to find a color fitting to the background;
    #  * foreground: use the same color as the foreground;
    #  * frame: use the same color as the frame;
    #  * anything else will be interpreted as a X color.
    separator_color = frame

    # Sort messages by urgency.
    sort = yes

    # Don't remove messages if the user is idle (no mouse/keyboard input)
    # for longer than idle_threshold seconds (0 to disable)
    idle_threshold = 120

    ### Text ###

    font = Monospace 14

    # The spacing between the lines. If the height is smaller than the
    # font height, it will get raised to the font height.
    line_height = 0

    # Possible values are:
    # full: Allow a small subset of html markup in notifications:
    #        <b>bold</b>
    #        <i>italic</i>
    #        <s>strikethrough</s>
    #        <u>underline</u>
    #
    #        For a complete reference see
    #        <http://developer.gnome.org/pango/stable/PangoMarkupFormat.html>.
    #
    # strip: This setting is provided for compatibility with some broken
    #        clients that send markup even though it's not enabled on the
    #        server. Dunst will try to strip the markup but the parsing is
    #        simplistic so using this option outside of matching rules for
    #        specific applications *IS GREATLY DISCOURAGED*.
    #
    # no:    Disable markup parsing, incoming notifications will be treated as
    #        plain text. Dunst will not advertise that it has the body-markup
    #        capability if this is set as a global setting.
    #
    # It's important to note that markup inside the format option will be parsed
    # regardless of what this is set to.
    markup = full

    # The format of the message.  Possible variables are:
    #   %a  appname
    #   %s  summary
    #   %b  body
    #   %i  iconname (including its path)
    #   %I  iconname (without its path)
    #   %p  progress value if set ([  0%] to [100%]) or nothing
    #   %n  progress value if set without any extra characters
    #   %%  Literal %
    # Markup is allowed
    format = "<b>%s</b>\n%b"

    # Text alignment of the message
    # Possible values are "left", "center" and "right".
    alignment = left

    # Show age of message if message is older than show_age_threshold seconds
    # Set to -1 to disable, 0 to always show.
    show_age_threshold = 60

    # Split notifications into multiple lines if they don't fit into geometry
    word_wrap = yes

    # When word_wrap is set to no, specify where to ellipsize long lines.
    # Possible values are "start", "middle" and "end"
    ellipsize = middle

    # Ignore newlines '\n' in notifications.
    ignore_newline = no

    # Merge multiple notifications with the same content
    stack_duplicates = true

    # Hide the count of merged notifications with the same content
    hide_duplicate_count = false

    # Display indicators for URLs (U) and actions (A)
    show_indicators = yes

    ### Icons ###

    # Align icons left/right/off
    icon_position = left

    # Scale larger icons down to this size, set to 0 to disable
    max_icon_size = 32

    # Paths to default icons
    icon_path = /usr/share/icons/hicolor/16x16/status/:/usr/share/icons/hicolor/16x16/devices/:/usr/share/icons/hicolor/16x16/apps/

    ### History ###

    # Should a notification popped up from history be sticky or timeout
    # as if it would normally do.
    sticky_history = yes

    # Maximum amount of notifications kept in history
    history_length = 20

    ### Misc/Advanced ###

    # dmenu path
    dmenu = /usr/bin/dmenu -p dunst:

    # Browser for opening urls in content menu
    browser = /usr/bin/firefox -new-tab

    # Always run rule-defined scripts, even if the notification is suppressed
    always_run_script = true

    # Define the title of the windows spawned by dunst
    title = Dunst

    # Define the class of the windows spawned by dunst
    class = Dunst

    # Print a notification on startup
    # this is mainly for error detection, since dbus (re-)starts dunst
    # automatically after a crash.
    startup_notification = false

    ### Legacy ###

    # Use the Xinerama extension instead of RandR for multi-monitor support.
    # This setting is provided for compatibility with older nVidia drivers that
    # do not support RandR and using it on systems that support RandR is highly
    # discouraged.
    #
    # By enabling this setting dunst will not be able to detect when a monitor
    # is connected or disconnected which might break follow mode if the screen
    # layout changes.
    force_xinerama = false

# Experimental features that may or may not work correctly. Do not expect them
# to have a consistent behaviour across releases.
[experimental]
    # Calculate the dpi to use on a per-monitor basis.
    # If this setting is enabled the Xft.dpi value will be ignored and instead
    # dunst will attempt to calculate an appropriate dpi value for each monitor
    # using the resolution and physical size. This might be useful in setups
    # where there are multiple screens with very different dpi values.
    per_monitor_dpi = false

[shortcuts]
    # Shortcuts are specified as [modifier+][modifier+]...key
    # Available modifiers are: "ctrl", "mod1" (alt), "mod2",
    # "mod3" and "mod4" (win). Xev might be helpful for finding key names

    # Close notification.
    close = ctrl+space
    # Close all notifications.
    close_all = ctrl+shift+space
    # Redisplay last message(s)
    history = ctrl+shift+grave
    # Context menu
    context = ctrl+shift+period

[urgency_low]
    background = "#35383b"
    foreground = "#fcf7e2"
    frame_color = "#27292c"
    timeout = 5
    # Icon for notifications with low urgency, uncomment to enable
    #icon = /path/to/icon

[urgency_normal]
    background = "#35383b"
    foreground = "#dffebe"
    frame_color = "#27292c"
    timeout = 10
    # Icon for notifications with normal urgency, uncomment to enable
    #icon = /path/to/icon

[urgency_critical]
    background = "#35383b"
    foreground = "#d27c7b"
    frame_color = "#27292c"
    timeout = 0
    # Icon for notifications with critical urgency, uncomment to enable
    #icon = /path/to/icon

# Every section that isn't one of the above is interpreted as a rules to
# override settings for certain messages.
# Messages can be matched by "appname", "summary", "body", "icon", "category",
# "msg_urgency" and you can override the "timeout", "urgency", "foreground",
# "background", "new_icon" and "format".
# Shell-like globbing will get expanded.
#
# SCRIPTING
# You can specify a script that gets run when the rule matches by
# setting the "script" option.
# The script will be called as follows:
#   script appname summary body icon urgency
# where urgency can be "LOW", "NORMAL" or "CRITICAL".
#
# NOTE: if you don't want a notification to be displayed, set the format
# to "".
# NOTE: It might be helpful to run dunst -print in a terminal in order
# to find fitting options for rules.

#[espeak]
#    summary = "*"
#    script = dunst_espeak.sh

#[script-test]
#    summary = "*script*"
#    script = dunst_test.sh

#[ignore]
#    # This notification will not be displayed
#    summary = "foobar"
#    format = ""

#[history-ignore]
#    # This notification will not be saved in history
#    summary = "foobar"
#    history_ignore = yes

#[signed_on]
#    appname = Pidgin
#    summary = "*signed on*"
#    urgency = low
#
#[signed_off]
#    appname = Pidgin
#    summary = *signed off*
#    urgency = low
#
#[says]
#    appname = Pidgin
#    summary = *says*
#    urgency = critical
#
#[twitter]
#    appname = Pidgin
#    summary = *twitter.com*
#    urgency = normal
#
# vim: ft=cfg
